https://www.vladilen.dev/products/javascript-senior-frontend

03: instalace GIT *****************************
***********************************************
v souboru .gitignore uvedeme:
        .idea
        node_modules

založíme prázdný soubor webpack.config.js
založíme GIT a v něm větvi Webpack (se souborem webpack.config.js)


04: instalace WebPack **************************
************************************************
inicializace projektu

1) nainstalujeme npm a node z https://nodejs.org/en/
    inicializujeme npm:
        npm init - vytvoří package.json

2)v package.json doplníme "private":true

3) nainstalujeme aktuální verzi webpack z https://webpack.js.org/

        npm install webpack webpack-cli --save-dev

    (popsáno v sekci Documentation/getting started)

    vytvoří se v složka node_modules se soubory
    a v package,json se objeví   "devDependencies": {
                                   "webpack": "^4.43.0",
                                   "webpack-cli": "^3.3.12"
                                 }
    vytvoří se také soubor package-lock.json (pro optimalizaci)

4) vytvoření složky src pro zdrojové soubory

5) vytvoření konfiguračního souboru webpack.config.js
   dokumentace:
   https://webpack.js.org/concepts/

    do webpack.config.js (který máme vytvořen už zminula) napíšeme:

        const path=require('path') //v path.resolve(__dirname) bude cesta k pracovní složce
        module.exports = {
            context: path.resolve(__dirname, 'src'), //určení kde je zdroják
            mode: "development",   //implicitně je mode:production
            entry: './index.js',  //vstupní bod (když je více vstupů, pak to definujeme v objektu
            output: {
                filename: 'bundle.js',   //název výstupního souboru
                path: path.resolve(__dirname,'dist')  //určení cesty - vytvořeni složky './dist'
            }
        }




6) ve složce src vytvoříme pro testování module.js a v něm
    console.log('module.js')

    a v src/index.js a v něm
        import './module.js'
        console.log('working!')

6) do package.json doplníme spoštěcí skripty:

      "scripts": {
        "start": "webpack",
        "build": "webpack --mode production"
      }

7) otestujeme
    spustíme v dev módu: npm run start
    v produkčním módu spustíme:
        npn run build

    vytvoří se složka dist s v ní soubor bundle.js (v produkčním modu bude minimalizovaná)

    otestujeme funkčnost: node dist/bundle.js

8) do .gitignore doplníme dist:
    .idea
    node_modules
    dist



05: Přidání pluginů **************************
**********************************************

instalujeme webpack pluginy z https://webpack.js.org/plugins/:
1. plugin pro práci s html:
    HtmlWebpackPlugin plugin:
    npm install --save-dev html-webpack-plugin
2. plugin pro kopírování souborů
    CopyWebPackPlugin:
    npm install copy-webpack-plugin --save-dev
3. pugin pro čištění složky od dřívějších souborů (čistič)
    CleanWebPackPlugin (hledám goolgem clean-web-pack-plugin)
    npm install --save-dev clean-webpack-plugin

ve webpack.config.js přidáme hash do výsledného soubour bundle:
filename: 'bundle.[hash].js'

a přidáme konstantu čističe výsledného souboru:
const {CleanWebpackPlugin} = require('clean-webpack-plugin')

celý soubor webpack.config.js pak vypadá takto:

const path=require('path')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
module.exports ={
    context: path.resolve(__dirname,'src'),
    mode: "development",
    entry: './index.js',
    output: {
        filename: 'bundle.[hash].js',
        path:path.resolve(__dirname,'dist')
    },
    plugins: [
        new CleanWebpackPlugin()
    ]
}

vyzkoušíme že to funguje (npm run start) a ve složce dist je při opakování jen jeden soubor bundle s hashem

do webpack.config.js přidáme konstantu pluginu HTML:
const HTMLWebpackPlugin = require('html-webpack-plugin')

a také ho dodáme do seznamu pluginů, kde mu zadáme templatku pro html soubor
        new HTMLWebpackPlugin({
            template: "index.html"
        })

celý soubor webpack.config.js pak vypadá takto:

const path=require('path')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const HTMLWebpackPlugin = require('html-webpack-plugin')
module.exports ={
    context: path.resolve(__dirname,'src'),
    mode: "development",
    entry: './index.js',
    output: {
        filename: 'bundle.[hash].js',
        path:path.resolve(__dirname,'dist')
    },
    plugins: [
        new CleanWebpackPlugin(),
        new HTMLWebpackPlugin({
            template: "index.html"
        })
    ]
}


ve složce src vytvoříme index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pure JavaScript Excel</title>
</head>
<body>
    <div id="app" class="container"></div>
</body>
</html>

zkusíme jestli to funguje:
npm run start /nebo npm run build/

ve složce dist se vytvoráří nový bundle a soubor index.html


naistalovali jsme také kopírovací pugin "copy-webpack-plugin" podíváme se jak ho použít
https://webpack.js.org/plugins/copy-webpack-plugin/

doplníme ho do webpack.config.js
const CopyPlugin = require('copy-webpack-plugin');

a do seznamu pluginú (použijeme ho na kopírování fvalicon ikonky)

        new CopyPlugin({
            patterns:[
                {
                    from: path.resolve(__dirname,'src/favicon.ico'),
                    to: path.resolve(__dirname,'dist')
                }
            ]
        })

!! pozor, starší verze nepoužívala objekt Patterns ale Array !!!!

flavicon ikonku: flavicon.ico umístíme do složky src

a upravíme index.html:
(přidáme link):

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pure JavaScript Excel</title>
    <link rel="shortcut icon" href="favicon.ico">
</head>
<body>
    <div id="app" class="container"></div>
</body>
</html>

a zkusíme npn run start

nyní přidáme MiniCssExtractPlugin z:
https://webpack.js.org/plugins/mini-css-extract-plugin/

npm install --save-dev mini-css-extract-plugin

účel - vynosit vytvořený Css soubor z javascriptu do samostatného souboru

do webpack.config.js přidáme:

const MiniCssExtractPlugin = require('mini-css-extract-plugin');

a do pluginů:
        new MiniCssExtractPlugin({
            filename: 'bundle.[hash].css'
        })

Před pluginami ve webpack.cofig.js přidáme
1. položku řešící implicitní příponu souborů pro příponu .js
2. a položku aliasů pro zkrácení cesty ke složkám src a src/core:

    resolve:{
        extensions: ['.js'],
        alias:{
            '@': path.resolve(__dirname,'src'),
            '@core':path.resolve(__dirname,'src/core')
        }
    },

 celý webpack.config.js vypadá takto:
const path=require('path')
const {CleanWebpackPlugin} = require('clean-webpack-plugin')
const HTMLWebpackPlugin = require('html-webpack-plugin')
const CopyPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports ={
    context: path.resolve(__dirname,'src'),
    mode: "development",
    entry: './index.js',
    output: {
        filename: 'bundle.[hash].js',
        path:path.resolve(__dirname,'dist')
    },
    resolve:{
        extensions: ['.js'],
        alias:{
            '@': path.resolve(__dirname,'src'),
            '@core':path.resolve(__dirname,'src/core')
        }
    },
    plugins: [
        new CleanWebpackPlugin(),
        new HTMLWebpackPlugin({
            template: 'index.html'
        }),
        new CopyPlugin({
            patterns:[
                {
                    from: path.resolve(__dirname,'src/favicon.ico'),
                    to: path.resolve(__dirname,'dist')
                }
            ]
        }),
        new MiniCssExtractPlugin({
            filename: 'bundle.[hash].css'
        })
    ]
}

a otestujeme npm run start /nebo npm run build


